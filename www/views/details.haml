- snp2l = Kinase::Postgres.snp2l(@protein, @mutation.scan(/\d+/).first)
- snp2db = Kinase::Postgres.snp2db(@protein, @mutation.scan(/\d+/).first)
- pfam = @features["pfam"].empty? ? 0 : @features["pfam"].split("|").length 
- pdbs = Kinase.pdb_position(@protein, @mutation.scan(/\d+/).first.to_i)


%h5 
  Details for
  Protein: 
  - names = [@translations[@protein], @translations_id[@protein]] - [@protein]
  = names * ", "
  %span.protein== (#{@protein}),
  Mutation:
  %span.mutation= @mutation
  %span.back_to_job
    Back to 
    %a(href="/job/#{ @jobname }")= @jobname.match(/(.*)_(.*)/)[1]

%nav.tabs
  %ul
    %li
      %a.active(target="#protein") Protein 
    %li
      %a(target="#domain")== Pfam Domains (#{pfam})
    %li
      %a(target="#residue") Residue
    %li
      %a(target="#jmol") Structure (#{pdbs.length})
    - if snp2db.any?
      %li
        %a(target="#SNP2DB")== Other Databases (#{snp2db.to_a.length})
    - else
      %li
        %a.inactive(target="#SNP2DB") Other Databases (0)
    - if snp2l.any?
      %li
        %a(target="#SNP2L")== Literature (#{snp2l.to_a.length})
    - else 
      %li
        %a.inactive(target="#SNP2L") Literature (0)
    %li
      %a.ihop(target="#IHOP") IHOP Interactions (--)

#protein
  %dl.protein
    %dt Gene Name
    %dd= @name

    %dt Protein Long Name
    %dd= @description

    %dt Summary
    %dd= @summary

    - if @other.include?([@protein, @mutation] * "_")
      %dt Other Predictors (0-1 range)
      %dd 
        %dl
          %dt Mutation Assessor
          %dd=  @other[[@protein, @mutation] * "_"]["Mutation Assessor"].to_f

          %dt SIFT
          %dd=  @other[[@protein, @mutation] * "_"]["SIFT"]



    %dt Kinase Group
    %dd
      == #{@features["uniprot_group"]}: #{$kinase_groups[@features["uniprot_group"]]}
    
    %dt.inline Gene Ontology Log-Odds Ratio
    %dd
      == #{"%.2f" % @features["sumGOLOR"].to_f}

    %table#goterms
      %thead
        %tr
          %th GOTerm
          %th Sub-ontology
          %th Name
      %tbody
        - @goterms.sort_by{|k,v| k}.each do |term,name|
          -  onto, name = name.match(/\((.*)\) (.*)/).values_at 1, 2
          %tr
            %td= term
            %td= {"MF" => "Molecular Function", "CC" => "Cellular Component", "BP" => "Biological Process"}[onto]
            %td= name

- $pfam_info ||= Pfam.domains.tsv 
#domain
  - if not @features["pfam"].empty?
    %dl.pfam
      - @features["pfam"].split("|").each do |domain|
        %dt
          = $pfam_info[domain]["Name"]
          (
          %a(href="http://pfam.sanger.ac.uk/family/#{domain}" target="_blank")= domain
          )
        %dd= $pfam_info[domain]["Description"]
  - else
    %h4 No Pfam Domain


#residue
  
  #residue_general
    %dl.residue
      %dt.specificity Kinase Family Subspecificity
      %dd.specificity
        %dl
          %dt Wild Type
          %dd= "%.2f" % @features["TDs_fscore_wt"].to_f

          %dt Mutant
          %dd= "%.2f" % @features["TDs_fscore_mt"].to_f

          %dt Difference
          %dd= "%.2f" % @features["TDs_fscore_diff"].to_f


      %dt.kdhc Kyte-Doolittle Hydrophobicity Change
      %dd.kdhc
        == #{"%.2f" % @features["biochem_diffkdhydrophobicity"].to_f}

      %dt.sift SIFT Prediction (Score)
      %dd.sift
        - case @features["SIFTscore_binned"]
        - when "-1"
          == Neutral (#{@features["SIFTscore"]}) 
        - when "1"
          == Disease (#{@features["SIFTscore"]}) 
        - when "0"
          == Not Predicted (#{@features["SIFTscore"]}) 

  #residue_functional
    %dl.functional
      - features = %w(firedb phosphoelm swannot_ptm swannot_disulfid swannot_carbohyd swannot_act_site swannot_signal swannot_catalytic swannot_site swannot_mod_res swannot_np_bind swannot_transmem swannot_mutagen swannot_metal swannot_binding)
      - names    = %w(FireDB PhosphoELM Post_Trans._Modification Disulfide_Bond Carbohyd Active_Site Signal_Peptide Catalytic_Site Site Modified_Residue Nucleotide_Binding Transmembrane Mutagenesis Metal_Binding Binding).collect{|v| v.gsub(/_/,' ')}
      - trans = Hash[*features.zip(names).flatten]
      - headers = %w( firedb phosphoelm swannot_transmem swannot_mutagen swannot_ptm swannot_catalytic )
      - %w( firedb phosphoelm swannot_transmem swannot_mutagen swannot_ptm swannot_mod_res swannot_signal swannot_catalytic swannot_disulfid swannot_carbohyd swannot_act_site swannot_site swannot_np_bind     swannot_metal swannot_binding ).each do |key|
        - name = trans[key]
        %dt{:class => (headers.include?(key) ? "" : "subfeature") }= name
        %dd{:class => (@features[key] == "1" ? 'red' : '')}= @features[key] == "1" ? "Yes" : "No"
 
#jmol
  %hr
  %select.pdb
    %option(selected="selected") Select a pdb
    - pdbs.each do |pdb, chain, pdb_position| 
      %option(attr-chain=chain attr-position=pdb_position attr-pdb=pdb)= "#{ pdb } (#{ pdb_position }:#{ chain })"

  :javascript

    jmolApplet(500, "", "PIZARRA");

    $('select.pdb').change(function(){
      var option = $(this).find("option:selected");
      var pdb = option.attr('attr-pdb');
      if (pdb == "Select a pdb") return false
      var pdb_position = option.attr('attr-position');
      var pdb_chain = option.attr('attr-chain');
      jmolScript("load '/pdb/" + pdb + ".pdb' ; wireframe off; restrict water; select protein; backbone off; color pink;cartoons on;color structure; select protein and *.CA and " + pdb_position + ":" + pdb_chain + "; spacefill; color blue;", "PIZARRA");
    })




#SNP2DB
  - if snp2db.any?
    %table#snp2db_table
      %thead
        %tr
          %th Mutation
          %th Description
          %th Database
      %tbody
      - snp2db.to_a.each do |info|
        - IndiferentHash.setup info
        %tr
          %td= [info[:wt], info[:seq_pos], info[:mutant]] * ""
          %td= info[:description]
          %td= info[:type]
 
#SNP2L
  - if snp2l.any?
    %table#snp2l_table
      %thead
        %tr
          %th Mutation
          %th PMID
          %th Content
          %th Comments
      %tbody
      - snp2l.to_a.each do |info|
        - IndiferentHash.setup info
        %tr
          %td
            - original, new = info.values_at :old_position, :new_position
            - if original != new
              == #{[info[:wt_aa], new, info[:mutant_aa]] * ""} (adjusted from: #{[info[:wt_aa], original, info[:mutant_aa]] * ""})
            - else
              = [info[:wt_aa], original, info[:mutant_aa]] * ""
          %td
            %a(href="http://www.ncbi.nlm.nih.gov/pubmed/#{info[:pubmed_id]}")= info[:pubmed_id]
          - synonyms = Organism::Hsa.identifiers.tsv(:key_field => "UniProt/SwissProt Accession", :persist => true)[@protein].flatten.compact.uniq.reject{|n| n.length < 3}.collect{|name| name.sub(/(\d+)/, ' *\1')}
          - synonyms << @protein
          - synonyms << @name
          - synonyms.uniq.sort_by{|n| n.length}.reverse
          %td= info[:line_content].gsub(/(#{synonyms * "|"})/, '<named_entity class="gene">\1</named_entity>').gsub(/([A-Z](?:[a-z][a-z])?\d+[A-Z](?:[a-z][a-z])?)/,'<named_entity class="mutation">\1</named_entity>')

          %td
            - if original != new
              == adjusted from: #{[info[:wt_aa], original, info[:mutant_aa]] * ""} by #{info[:type]}

#IHOP
  %p#loading Loading. Please Wait.


:javascript
  tabs($('nav.tabs'))
  $('#goterms,#snp2db_table,#snp2l_table').tablesorter({widgets: ['zebra']});

  $.ajax({url: '/sentences/#{@protein}', success: function(data){
    $('p#loading').replaceWith(data);

    var num_sentences = $('ihopsentence').length;
    var synonyms = [];

    $('a.ihop').html("IHOP Interactions (" + num_sentences + ")");

    $('ihopsentence').each(function(){
      var sentence = $(this);
      var pmid = sentence.attr('pmid');

      sentence.find('ihopatom').each(function(){
        var atom = $(this);
        var evidence = atom.find('evidence');
        var id = evidence.attr('id')
        atom.children().remove()
        if (evidence.attr('symbol') == '#{@name}'){
          atom.addClass('main');
          synonyms.push(atom.html());
        }
        atom.attr('id', id);
      })

      var new_html = '[<a href="http://www.ncbi.nlm.nih.gov/pubmed/' + pmid + '">PMID: ' + pmid + '</a>] ' + sentence.html();
      sentence.html(new_html);

      sentence.find('ihopatom[id]').click(function(){
        var id = $(this).attr('id');
        var url = "http://www.ihop-net.org/UniPub/iHOP/gs/" + id + ".html"
        window.open(url, 'blank');
      })
      

    })

    synonyms = $.unique(synonyms.sort());

    $('div#IHOP').prepend("<p>Synonyms: " + synonyms.join(", "));
  }})

